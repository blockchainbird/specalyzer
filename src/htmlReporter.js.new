/**
 * HTML Report Generator for Specalyzer
 * Provides functionality to generate HTML reports with Bootstrap styling
 */

const fs = require('fs');
const path = require('path');
const os = require('os');
const open = require('open');

/**
 * Generate HTML boilerplate with Bootstrap
 * @param {string} title - Report title
 * @param {string} analyzedUrl - URL that was analyzed
 * @returns {string} HTML boilerplate
 */
function generateHtmlBoilerplate(title, analyzedUrl) {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${title} - ${analyzedUrl}</title>
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path d='M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm.25 5.5a.75.75 0 0 0-1.5 0v3.75h-2a.75.75 0 1 0 0 1.5h3.25a.75.75 0 0 0 .75-.75V5.5z'/></svg>" type="image/svg+xml">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      padding: 20px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    .report-header {
      margin-bottom: 30px;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 5px;
    }
    .report-title {
      color: #0d6efd;
      font-weight: bold;
    }
    .status-section {
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .report-footer {
      margin-top: 30px;
      border-top: 1px solid #dee2e6;
      padding-top: 15px;
      padding-bottom: 20px;
      font-size: 0.9rem;
      color: #6c757d;
      text-align: center;
    }
    .card-header {
      font-weight: 500;
    }
    .version-list {
      max-height: 200px;
      overflow-y: auto;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 4px;
    }
    .url-info {
      word-break: break-all;
      margin-top: 10px;
    }
    .timestamp {
      font-size: 0.85rem;
      color: #6c757d;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row report-header">
      <div class="col-md-8">
        <h1 class="report-title">${title}</h1>
        <p class="text-muted">Generated on ${currentDate} at ${currentTime}</p>
        <div class="url-info">
          <strong><i class="bi bi-link"></i> Analyzed URL:</strong> <a href="${analyzedUrl}" target="_blank">${analyzedUrl}</a>
        </div>
      </div>
      <div class="col-md-4 text-end">
        <img src="https://raw.githubusercontent.com/blockchainbird/specalyzer/main/specalyzer-logo.png" alt="Specalyzer Logo" height="80" onerror="this.style.display='none'">
      </div>
    </div>
    <div class="report-content">`;
}

/**
 * Generate HTML footer
 * @param {string} version - Specalyzer version
 * @returns {string} HTML footer
 */
function generateHtmlFooter(version) {
  const timestamp = new Date().toISOString();
  
  return `
    </div>
    <div class="report-footer">
      <p>
        <i class="bi bi-info-circle"></i> Report generated by 
        <a href="https://github.com/blockchainbird/specalyzer" target="_blank">Specalyzer</a> v${version} 
      </p>
      <p class="timestamp">Generated: ${timestamp}</p>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>`;
}

/**
 * Create a card section for HTML report
 * @param {string} title - Section title
 * @param {string} content - Section content
 * @param {string} status - Section status (success, warning, danger, info)
 * @returns {string} HTML card
 */
function createCardSection(title, content, status = 'primary') {
  return `
    <div class="card status-section">
      <div class="card-header bg-${status} text-white">
        ${title}
      </div>
      <div class="card-body">
        ${content}
      </div>
    </div>`;
}

/**
 * Format repository information as HTML
 * @param {Object|string} repo - Repository information
 * @returns {string} HTML content
 */
function formatRepositoryInfo(repo) {
  // Use the existing repoUrl module to format the repo URL correctly
  const repoUrlModule = require('./repoUrl');
  const formattedUrl = repoUrlModule.formatRepoUrl(repo);
  
  return `<div class="alert alert-primary">
    <i class="bi bi-github"></i> Repository: <a href="${formattedUrl}" target="_blank" class="alert-link">${formattedUrl}</a>
  </div>`;
}

/**
 * Format PDF status as HTML
 * @param {boolean} exists - Whether PDF exists
 * @param {Error} [error] - Optional error
 * @returns {string} HTML content
 */
function formatPdfStatus(exists, error) {
  if (error) {
    return `<div class="alert alert-warning">
      <i class="bi bi-exclamation-triangle-fill"></i> Error checking for index.pdf: ${error.message}
    </div>`;
  }
  
  if (exists) {
    return `<div class="alert alert-success">
      <i class="bi bi-check-circle-fill"></i> index.pdf exists
    </div>`;
  } else {
    return `<div class="alert alert-warning">
      <i class="bi bi-exclamation-triangle-fill"></i> index.pdf does NOT exist
    </div>`;
  }
}

/**
 * Format spec-up-t version info as HTML
 * @param {string|null} version - Version string
 * @returns {string} HTML content
 */
function formatSpecUpVersion(version) {
  if (version) {
    return `<div class="alert alert-info">
      <i class="bi bi-info-circle-fill"></i> spec-up-t version in package.json: <strong>${version}</strong>
    </div>`;
  } else {
    return `<div class="alert alert-warning">
      <i class="bi bi-exclamation-triangle-fill"></i> spec-up-t is not listed as a dependency in package.json
    </div>`;
  }
}

/**
 * Format version information as HTML
 * @param {Object} versionInfo - Version information object
 * @returns {string} HTML content
 */
function formatVersionInfo(versionInfo) {
  let html = '';
  
  if (versionInfo.exists) {
    html += `<div class="alert alert-success">
      <i class="bi bi-check-circle-fill"></i> Versions directory exists
    </div>`;
    
    if (versionInfo.versions && versionInfo.versions.length > 0) {
      html += `<p><strong>Version subdirectories found (${versionInfo.versions.length}):</strong></p>`;
      html += '<div class="version-list">';
      html += '<ul class="list-group list-group-flush">';
      versionInfo.versions.forEach(version => {
        html += `<li class="list-group-item d-flex justify-content-between align-items-center">
          ${version}
          <span class="badge bg-primary rounded-pill"><i class="bi bi-tag"></i></span>
        </li>`;
      });
      html += '</ul>';
      html += '</div>';
    } else {
      html += '<div class="alert alert-warning">
        <i class="bi bi-exclamation-triangle-fill"></i> No version subdirectories found
      </div>';
    }
  } else {
    html += '<div class="alert alert-warning">
      <i class="bi bi-exclamation-triangle-fill"></i> Versions directory does not exist
    </div>';
  }
  
  return html;
}

/**
 * Save HTML report to file and open in browser
 * @param {string} html - HTML content
 * @param {string} url - URL that was analyzed
 * @returns {Promise<string>} Path to saved file
 */
async function saveAndOpenReport(html, url) {
  try {
    // Create sanitized filename from URL
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.replace(/[^a-z0-9]/gi, '-');
    const pathname = urlObj.pathname.replace(/[^a-z0-9]/gi, '-');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `specalyzer-report-${hostname}${pathname}-${timestamp}.html`;
    
    // Save to temp directory
    const tempDir = os.tmpdir();
    const filePath = path.join(tempDir, filename);
    
    fs.writeFileSync(filePath, html);
    
    // Open in browser
    await open(filePath);
    
    return filePath;
  } catch (error) {
    console.error(`Error saving HTML report: ${error.message}`);
    throw error;
  }
}

module.exports = {
  generateHtmlBoilerplate,
  generateHtmlFooter,
  createCardSection,
  formatRepositoryInfo,
  formatPdfStatus,
  formatSpecUpVersion,
  formatVersionInfo,
  saveAndOpenReport
};
